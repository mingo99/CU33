# ---------------------------------------------------------------------
# Script to automatically create a synthesis project and run it
# Uses filelist.tcl to set files and parameters
# ---------------------------------------------------------------------

# Procedure to strip comments from filelist fields
# runtest supports comment fields, so need to strip for compatibility
proc strip_comments { inlist } {

    # Treat the input as a string and split into lines based on carriage return
    set inlist_lines [split $inlist "\n"]

    set outlist [list]

    # Scan the list.  If a comment is found at the start of a line
    # then skip that line.  Or if line is empty, also skip
    foreach element $inlist_lines {
        # puts "Element $element length [string length $element]"
        if { [string first "#" $element] == 0 } {
            continue
        }
        if { $element == "" } {
            continue
        }

        # Not a comment or empty line, so write to output
        # Trim any leading spaces
        lappend outlist [string trimleft $element]
    }

    return $outlist
}

# Procedure to write the start of a filelist
proc write_filelist_header { fo infile_name } {
    # Add banner
    puts $fo "\n# -------------------------------------"
    puts $fo "# Autogenerated simulation filelist"
    puts $fo "# Do not edit this file as it will be overwritten"
    puts $fo "# Generated by $::argv0 on [clock format [clock seconds] -format {%H:%M:%S %a %d %b %y}]"
    puts $fo "# Filelist added files from $infile_name"
    puts $fo "# -------------------------------------\n"
}

# Procedure to write the end of the file list
proc write_filelist_tail { fo infile_name } {
    # Write tail
    puts $fo "\n# -------------------------------------"
    puts $fo "# End of user filelist $infile_name"
    puts $fo "# -------------------------------------\n"
}

# Project name and filelist are passed in
# Project name will be the 5th argument on the line
# File list will be the 6th argument on the line

if { $argc != 2 } {
    puts $argc
    puts "Need at least two arguments, to include output and input filenames.  Got $argc"
    return -1
}

# Two arguments minimum needed
set output_filename [lindex $argv 0]
set input_filelist  [lindex $argv 1]
puts "Building simulation filelist $output_filename, using filelist $input_filelist"
puts "[pwd]"

# Set paths to source code
# These are specific to this particular project and may need changing if this script
# is used elsewhere
# Extract path to filelist
set path_to_filelist    [file dirname $input_filelist]
set path_to_rtl         $path_to_filelist/rtl
set path_to_rtl_include $path_to_filelist/include
set path_to_tb          $path_to_filelist/tb

# Read the filelist
if { ![file exists $input_filelist] } {
    puts "No such file $filelistName.  Current dir [pwd]"
    return -1
} else {
    source $input_filelist
}

# Open the output file
set fpo [open $output_filename {WRONLY CREAT TRUNC}]
if { $fpo == 0} {
    puts "Cannot open output file $output_filename"
    return -1
}

# Write the filelist header
write_filelist_header $fpo $input_filelist

# Verilog only include paths
# Standard directory structure has include directory.  Add as an incdir
puts $fpo "# Verilog design file include directory"
puts $fpo "+incdir+$path_to_rtl_include"
# Also will require path to testbench directory for tb include files
puts $fpo "# Verilog testbench file include directory"
puts $fpo "+incdir+$path_to_tb"

# Add include files
if { [info exists rtl_include_files] } {
    puts $fpo "\n# Include files"
    foreach fname [strip_comments $rtl_include_files] {
	    if { [file ext $fname] == ".svh" } {
            puts $fpo "-sv [file join $path_to_rtl_include $fname]"
	    } else {
            puts $fpo "[file join $path_to_rtl_include $fname]"
        }
    }
}

# Add Verilog source files
if { [info exists rtl_verilog_files] } {
    puts $fpo "\n# Verilog source files"
	foreach fname [strip_comments $rtl_verilog_files] {
	    if { [file ext $fname] == ".sv" } {
            puts $fpo "-sv [file join $path_to_rtl $fname]"
	    } else {
            puts $fpo "[file join $path_to_rtl $fname]"
        }
	}
}

# Add testbench files
if { [info exists tb_verilog_files] } {
    puts $fpo "\n# Verilog testbench files"
	foreach fname [strip_comments $tb_verilog_files] {
	    if { [file ext $fname] == ".sv" } {
            puts $fpo "-sv [file join $path_to_tb $fname]"
	    } else {
            puts $fpo "[file join $path_to_tb $fname]"
        }
	}
}

# Write end of filelist
write_filelist_tail $fpo $input_filelist

# Close the output file
close $fpo